# https://www.mrgraeme.com/greedy-motif-search/      <--- algorithm explanation

def CreateProfile(motifs):
    num = len(motifs)
    profile = []
    for i in range(k):
        A_count = 0
        C_count = 0
        G_count = 0
        T_count = 0
        for j in range(num):
            if motifs[j][i] == 'A':
                A_count += 1
            elif motifs[j][i] == 'C':
                C_count += 1
            elif motifs[j][i] == 'G':
                G_count += 1
            elif motifs[j][i] == 'T':
                T_count += 1
        profile.append([(A_count+1)/(num+4),(C_count+1)/(num+4),(G_count+1)/(num+4),(T_count+1)/(num+4)])       # with pseudocounts
    return profile

# motifs = ['GGC','AAG']
# k = 3
# print(CreateProfile(motifs))

def ProfileMostProbable(string,k,profile):
    probability = 0
    position = 0                                # set the default position to prevent error
    for i in range(len(string)-k+1):            # also means selecting the first kmer if all the probabilities equal to 0
        prob = 1
        for j in range(k):
            if string[i+j] == 'A':
                prob *= float(profile[j][0])
            elif string[i+j] == 'C':
                prob *= float(profile[j][1])
            elif string[i+j] == 'G':
                prob *= float(profile[j][2])
            elif string[i+j] == 'T':
                prob *= float(profile[j][3])
        if prob > probability:
            probability = prob
            position = i
    return string[position:position+k]

# string = 'CAAGGAGTTCGC'
# k = 3
# motifs = ['GGC','AAG']
# profile = CreateProfile(motifs)
# print(ProfileMostProbable(string,k,profile))

def hammingdis(p,q):
    count = []
    for i in range(0,len(p)):
        if p[i] == q[i]:
            continue
        else:
            count.append(i)
    return len(count)

def Score(motifs):
    num = len(motifs)
    consensus = []
    for i in range(k):
        tcount = {'A':0,'C':0,'G':0,'T':0}
        for j in range(num):
            if motifs[j][i] == 'A':
                tcount['A'] += 1
            elif motifs[j][i] == 'C':
                tcount['C'] += 1
            elif motifs[j][i] == 'G':
                tcount['G'] += 1
            elif motifs[j][i] == 'T':
                tcount['T'] += 1
        for key,value in tcount.items():
            if value == max(tcount.values()):
                consensus.append(key)
                break                           # to prevent getting more than one character from one loop
    ConsensusString = "".join(consensus)
    result = 0
    for motif in motifs:
        result += hammingdis(ConsensusString,motif)
    return result

# motifs = ['GGC','AAG','AAG','CAC','CAA']
# k = 3
# print(Score(motifs))

def GreedyMotifSearch(DnaString,k,t):
    Dna = DnaString.split(' ')                  # convert the str to list
    length = len(Dna[0])
    BestMotifs = []
    for i in range(t):
        BestMotifs.append(Dna[i][:k])
    for j in range(length-k+1):
        motifs = []
        motifs.append(Dna[0][j:j+k])
        for m in range(1,t):
            Profile = CreateProfile(motifs)
            motifs.append(ProfileMostProbable(Dna[m],k,Profile))
        if Score(motifs) < Score(BestMotifs):
            for n in range(t):
                BestMotifs[n] = motifs[n]
    return BestMotifs

k = 12
t = 25
DnaString = '''GTCTCAGTGACGGAAATACCCGCAGCTCCGATACATAAAAGAAGATTCTACGTCAGATTGGGTGTAAAGCTCCGATAAAATACTGAGTTTGGCACGGTGGCCCGGTTGTTGTCAGGACGTGTAATAACTGAGCTGGCTTTACAGAGGCACGTCGCG GTCAGAGGGCAAGTATATCTGAATGTGCCATCGGAGCTACGTAATCTATACGGAAATTACATCGGTAGAAAGCAACCGGAGCTCATTTACGGCGCGGACTCAGTGACGGATTTTTAACCCAAGCCTTGAGCCAAAAGGGTTTCTGCTGAACTTTGA GAAACTCCGTGCAGGTCTACTGGTGGAAGTGCTGTCACGGCGATGTATCGAGTCGGTCGGGTACCAAGTACGACCGCAGGGACTGGGCACGCTGGTGTACGCGCAGCTCATGAAGTCCCGAGCTCACTGATGATCAAGCACAGACCTACTCCTTGC GTGCCTAGTCAGACTTTATGTTTCGTGTTTTTAGATAGAGAGGTCGCCGCGAATACTCTTCAGTCGCCGAGTTACTCAATGACGCATTAAATTGATGATAATGTTCCGGCCCGTCGCCTTAAGCACGGAGTATACACACAGTTCCTACAATAGACG CGGGTTTTTCTAGATGATGGACTCAAGGATAATCGTAGTTTCGAAGTCGACAAAATTTACTGTGTCTGTATGTTAGGAGCTGTAAGAACAGGAATGGGCAAACCCGCAGCGCACGCGGTGCTCTCAATGAAGACGTATTATCCAGGGTTACGACGC CTGATAGGATGATCCACTCAAAGTGGTGTATCGCCGAGCTCCCACTCCAGGTTGAATAGGTGTGGATTATGACGGACTAAGAAACTACCTAGACAGTCGTTAGCTACATTATAGAACTGACTTGAAACGATGAGCTCACTGATGACAACAGACGGT ATGGAGATAGGCGAACACCTTTATTAGGACAAGTACCCCTCAGTGATGTGGCGGTTCTGACCTGCAAGGTTCTAAATAATAACCTAATTCGCTGCGTGAGATGAGTTTCGGTGACCAACTAGAGGTCCTACCACCCTATCGGCTGAACAAGTCTGG AACATCAAAAATACTTAGCGAAGATCCAGCTTCGGGGCGTAAAGGAAGTTTGCGAGCGTATGCGAAATGTCGCCAAGCTCCAATGCGTACTTAGTTGATTCCCACCATATGACTTGGGTGGTTCGGAGCTGAGCCTCAGTGAGGTGGCCCACTGCC TCCGTTCTGGTGCGCTTTCAGGCTCAATATGACGAGAGTACATAGACTGCTCTCAACGTTCAACCTATAAATCTTGGGCTCTACGGCTCACTGACGCCTCACAATGATCTTGCGCGAAGTATCCTTGATGACTGCACACAGGGCATAGAAAGATAT TACACCGGGCTCTGATTCGACTTGGAAAGGCCTAATATCTCATTGACGACGGTTAGATAGCAAAATCGTGTGTCCATTGGACGCCAGGGGCACATTTCAATATTGGCTGGATTGAGCAAATGTTATTTAGTGTTAAAAGGATTTTACCAAGTCGAG CCGGAATTGCAGCCGTATGTAATTATCTCAATGATGTCAAGCCCCAATCGATTTCTTCATCCAATATACACTGCTGTGCGCAAAAGTACCAGTCCATCGCCTTAAAATCCCGACCCACGGATTTGCTGCTGGCTTGTATGCTCCTTTGCGTCAAGC ATCGAGTGGCGCGTGTGCAGGCCGCCACGGGAAATAGATGTCGAAAGTCTGAACGGCTAGGCAAGACATCCGGGGTCATTGCACGGCTTCTAAACTCACTCATTGAAGCAACCGAGGGTTATTAGCACAAACTAAAGCCTGGGCCTACCAAGAGAA GGCTCATTGATGCTATTACTGATCCCGACTGGGTACGCCAATAGCTATACACGAACTAAGGGACTATCGACATGGACCGCAAAGTTAGACCTTACCCCATACAATGAAGTATCCGCTGTAAGTTCGTATATGCGCATCAAAGGATTGCAAAATTCA GTCTATTCTATTTAGCTTGATGGCGGTAGAAAAGTTCGTGGTTTTAGTTCGTCGCATGGTGACTTATGATTGTCGGCGTGTTAAACGAGCCTTTTGATTGCGTTCCACCTTGAGATGGGAAGCCCTGCTCAGCGCTCAGTGAAGAGAAGTCTGCCT AGTTAACCTATTGTAAAGGCGTTCATTATGAAAAAACGCCCCAGATCAGTCTTTCCATACTAAATATGTGACATCTCATTGATGCTACGATAAAGAAGACTAAAGAGTCCAACCGACGGTACCGGTCGCCAGGGGTCTGACACGGCTTCCGGTGAT ACGCCCTGTACTAGCGCAAAACGCCTCACACTCCTGTTCAATGTGAAAGGAGCAAATACTCGCTCAGTGAGGTAAAGTTTGTAATGGTCAGGCTTTCCCTATGACCTGTTTGAGCTATAAAGAGGTCGGGGGCTGGGTTGCCTCAGGGCCCCATGT ATCTGAATTGTGCGTGCACGTACCCACAGATTGATCAGCTCACTCGTCAACAAAGCACCACCACATATAGGGTGACAGGAATAGGACCAACTGCAGATGTAGGTGTTAGCCTCACTGATGGGACCTAGAGAGCACTCTTCCGTACTACGTGACCAG CGGAGTATGCGTTATATGTAAGTAGTGACAAACAGCTTCAAGCATTCATAGAATCTTGAAGTGCGAAGATCCGTCTCAATGATGTAATTTCCCTCGCCTTTTTCTCTTACTTCCGTGGCCCCGTGTCTACCTCAAATGGTGGTAGATTCACTCCAT TACGTAGCATGACCACTCCTCGGTTCGCCGCCCCGGAGCACTTCCTTTAGCTCATTGAGGTTGCTAGCCGTATCACATAGCAGGTCGGTTCGCAGCAGAGATCCCTAAACGCATCTCTTAATCTGTTCGGTTTTAGACCGTCCTGCAATCGCGGCG ACGTCGGATTTCTGGGTGTTGTAGTTGGCCGTTCCTAGTCCAGGTTCAGACTATCGATCCATCTCACTGACGATCCCTTAACCCGCAGGAGTAGTTCAGACTTGAACTATACGGAACTTCCTCCTCGGGGAATTATGACCACGGTGTACGCTACAG CCACGTTGACAAGAGGTCGCTGGCAACTATCAAAGTCCCCTAAGCCTATTCTCATTGAGGTGGCGGAATGCGGACGCACATTGTCGAGCACTCGGGTGTTTTAATGGATCTAACGATATATCCCGACTCAGATGTTGCACCTGTAAAGTATTGATG TCAGAAAAAAGTTGTACCGAGCCTGCTTGATTGCTCTGGCATAGCGCCATTAATTGGGGGGTTGTCCACGTTACGCCAGCCCCGAGCTCATTCTACCAGAAAATTCGGTGCTCAATGACGGTGCGCCCCGAAGCGTGTAGCCGTCCCGGAGAGCAA ATGCATTATGCGCTCTCAGTGAGGGTCAGAAACGTTATCAGTCAAATATATTAGGTAACCTAATCCAACATCAGACGTCTGATGGATTGGTGCCAGAGGAGAAGGCATCCTAAGCAGCACCCGTATACAAGCATCCGGTGGTCAGCCAGCCTTACC CATGCTTGCAGTAAGGCCAAAGAGTCCGATACGTTTGCATTGCCCACCAAGACAGGCGACCGATAGGGCTGGGGCGGAGCCCTGATGCTTAGCTGGAAAGAGGAGATGTCACAGACGGAGGTCTCAGTGAGGAGCAGGATAACCTATTTCCTTCGG TCGAGCGACCGGTGAGGCAAGTAGGCTTAGATCCGCTGATTATGAGTATGACACGCTGCTTGTATCACTATAATATTATCAGAAATCAGATCCCAATTCTCAATGATGATTTCGGTCGAGTGCTATCTAAGCCGGAGACAACCCGCCAGGGTCCCA'''

print(*GreedyMotifSearch(DnaString,k,t))
