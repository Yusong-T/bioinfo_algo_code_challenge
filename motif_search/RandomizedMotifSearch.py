# C1_W4

import random

def CreateProfile(motifs):
    num = len(motifs)
    profile = []
    for i in range(k):
        A_count = 0
        C_count = 0
        G_count = 0
        T_count = 0
        for j in range(num):
            if motifs[j][i] == 'A':
                A_count += 1
            elif motifs[j][i] == 'C':
                C_count += 1
            elif motifs[j][i] == 'G':
                G_count += 1
            elif motifs[j][i] == 'T':
                T_count += 1
        profile.append([(A_count+1)/(num+4),(C_count+1)/(num+4),(G_count+1)/(num+4),(T_count+1)/(num+4)])       # with pseudocounts
    return profile

def ProfileMostProbable(string,k,profile):
    probability = 0
    position = 0                                # set the default position to prevent error
    for i in range(len(string)-k+1):            # also means selecting the first kmer if all the probabilities equal to 0
        prob = 1
        for j in range(k):
            if string[i+j] == 'A':
                prob *= float(profile[j][0])
            elif string[i+j] == 'C':
                prob *= float(profile[j][1])
            elif string[i+j] == 'G':
                prob *= float(profile[j][2])
            elif string[i+j] == 'T':
                prob *= float(profile[j][3])
        if prob > probability:
            probability = prob
            position = i
    return string[position:position+k]

def hammingdis(p,q):
    count = []
    for i in range(0,len(p)):
        if p[i] == q[i]:
            continue
        else:
            count.append(i)
    return len(count)

def Score(motifs):
    num = len(motifs)
    consensus = []
    for i in range(k):
        tcount = {'A':0,'C':0,'G':0,'T':0}
        for j in range(num):
            if motifs[j][i] == 'A':
                tcount['A'] += 1
            elif motifs[j][i] == 'C':
                tcount['C'] += 1
            elif motifs[j][i] == 'G':
                tcount['G'] += 1
            elif motifs[j][i] == 'T':
                tcount['T'] += 1
        for key,value in tcount.items():
            if value == max(tcount.values()):
                consensus.append(key)
                break                           # to prevent getting more than one character from one loop
    ConsensusString = "".join(consensus)
    result = 0
    for motif in motifs:
        result += hammingdis(ConsensusString,motif)
    return result

def RandomizedMotifSearch(DnaString,k,t):
    Dna = DnaString.split(' ')
    length = len(Dna[0])
    times = 1
    Results = []
    CurrentScore = k * t
    while times <= 1000:
        times += 1
        Motifs = []
        BestMotifs = []
        for i in range(t):
            ranpos = random.randint(0,length-k)             # note that both side-values are included
            Motifs.append(Dna[i][ranpos:ranpos+k])
            BestMotifs.append(Dna[i][ranpos:ranpos+k])
        while True:
            Profile = CreateProfile(Motifs)
            for j in range(t):
                Motifs[j] = ProfileMostProbable(Dna[j],k,Profile)
            if Score(Motifs) < Score(BestMotifs):
                for m in range(t):
                    BestMotifs[m] = Motifs[m]
            else:
                break
        if Score(BestMotifs) < CurrentScore:
            Results.clear()
            for n in range(t):
                Results.append(BestMotifs[n])
            CurrentScore = Score(Results)
    return Results


k = 15
t = 20
DnaString = '''GTATCGCGTTCTATTTAGAGGATATCGGACCCGAGGGTGAAATACGTAAGGACTTTTTTGAATAAATTACGAAGGGTACGCCCCTTTTTCAATCACCTCTCCCGGATCGCTATTAGCCCCTTCAGCTAAAGCTACGGTGTTCGCTGGAACGTCTGTATCGCGTTCTATT TAGAGGATATCGGACCCGAGGGTGAAATACGTAAGGACTTTTTTGAATAAATTACGAAGGGTACGCCCCTTTTTCAATCACCTCTCCCGGATCGCTATTAGCCCCTTCAGCTAAAGCTACGGTGTAGATATGAATTCTGATCGCTGGAACGTCTGTATCGCGTTCTATT AGAGTGCGATTCTGAGGTCCGCGACTTTGTTGACCACCCCAGCTAAAGAGTATCCAGACCGTAAATCCGCGGAGGTCCCGCATCATGTCCTGTAAGTTTTGTACCGGACCTCCTTTTCCCTCGCTGGGTCTCTCGAGACAGTCCGGTCGCCCTTGGCGCATCACCCATC CGTCTTAAGACCTGAGTAGAATTCTTTCGACTGATCTGATTATACTTCGTGTCGCTTGGATGACGATCATTATATTCTAAGTCGATCGTTATATCCCTTGCCGACGGTGGAACTATGCTCATCGGAAAAGAATTAATTACTAGGTATGTTTCTTGCGGCTCACCATGAC ACCGCATGTCAACTGGCTTAGACTTACACGGTTGCTATACGACGTCGGGCTTTAGAAGTGGTAGAACCCCGTGGGAGAATTTTTATTTAATATCCATGCCCGTACCAATCGCCTCTTTCGTTCAGAGTTATATTCTGATGAGTCCGCTCATTGATGAACCTCCACTCAC ACTCACTCGTCGACGCGCGATTCTCGGCTTTCGCGTCAAGCATACGGGTTAGGTTATGCCAGTAGTAATGCATGCCACACCCCAAAGCCTTAGGACTGAGTCTGAAATGAATTACAGTTAACGTTGGGATCATCATAGAGTAGAGGGCTGACAAGAAATAATTACGACA AGTATTACAATCCTGGCGCCGGGGCGGATGTTCCGTGGCGGTGTGAAGCTAATGGCGAGGCAACATCAAGACGTTTATCGTTCCCGGTCCACGATACATAGCTAGGCTCTACCGCCGCACAGAGTTTGAGAGTAGAATTCATGAGACGGAGGCCTGAACCTCACTCCGG TAGTGAGGATTGCTCAACGCGTGTCTCCTCGGTTGGCTTCATTCTTGTGTTCTCGATGTTAATACGGAACTGGGCGAAAGACACAGCTGAGTCGGTGGATTGGGCTACCTCGCCCTGGCTGAGATGTGAATTCTGAATCGTATGATGTAATGCAGGGGAATCAGTAGTA TCCTATTGACGATACGCAGTAGTATCCGGCTACAGTTCGCTAAAGATATAGTCCTAGCTTATTGAATTGGTCTTGGAAGATAGAATTCTGAGGTCTTGGGAAGTACTCGAAGGTAATGGGCAGACGTGTAAACTATTATGCATATATTTAGCGAAACCTGGCACGTATT ACCTAGTCTCAGGTGGTCAGCGGTGTAACCACCGTTGGCGTAGATCCTTGGGTTTTCCGCGTTCATCGATCATAGGAGCCAGAGTAGAATAGGGAACTTCGGTCGGCTGTTAGGGACGGTCCCCTGTTGTATGGTCTTAATTAGAGCATGAGCTGTAGCTACGGTGAAC GGCTGTCTACCCTACGAGCATTGATATCATTGTTTGCGCAGTAGAATTCTGGTTCAGGCGTTCCCTTTAGCTTGGTGTATTCTATGTCCTACTAAGAGTGTAACCCGCTCATTAGTTTCAAAGTTATCATACCTCCAAGACTATCGGTTAAACATCTCATCTGGTCAGA CTACCAACCAATTGGGAACCGCGCGTCGGTCTTTGGGATGTCAATTTCCGGGACAAAGTAAGTTAGAGTAGAACGATGACATCTGTTGGAATGATTAACAGTAGACTCATGCTTTTCGGAGACCTCGGCCGATCAAAATAGGAAACGGTTCCAACCGGAATCTAATGGA ACTCCTACAACCCACGATGCTTCTTTCTGTGATTTTTTGGCGGCGGGGGTTCAAGTTGTAGAATTCTGACCTTTGCTGGGAACCAGACTCTTCGAGCAGTACTGTCGATGATGATGGGGCAGGTTAACGTACAAAGTATCGCCTTTATCTAACAATCAGTCGAAATCGA GGGTAGCTTTCCCGCCGTCAGATAGAAGAGTTGTCAACTTCAGATGACGACTGTGCTTTGGCAGCTGAGAATTCTGAGTCCACAGCCGGGTCATTTATTGGCGATCATCAAGATCCTAAGACACCGTGATGCGTTTAGTATAGCTTGCGCTTGAAAGCACGTTCCGTAT ACTGCGATACCTACTTTATCCTCAGAGTATTCTTCTGACGCGATGGCTGACGAATAGACCACTGAGCACCAGGCCTCTGCATGGACGATAAGGCGCGGTAGCCTCAGGCACGGCTAATCGTTGAACGTTATCGTCGGACTCTAAACGGAATCAGTTTGGGTCATTTCAA GTTGCGGCTCCCCAAGAGCGAGCAGCGTTCGTCCAGTAATAAACACTGTCACGGAAACGTCTAGGCACGCTTTGGGTGCGAACCCTTGTTTTTGGCCAGTTTTGAGAGTAGAATTAGAACGCCTGGATACAAGTCAGCCGGGATAATATCAACAGTAGTTGAATGATGG GCGCCAGCTCTAGTGTACTCCAGATCGTCAGGCAGCGGGCGTTCTATATGTAGTGCGCTTGCTTCGGGCTTGAACTAAACTGAGAGTAAGCTTCTGACTAATCGCTTTGCTTAGATTGTTAGAAGCCAGTGCGCGGGAGCCCGCGGAGGTGCCTCTTCATAACAGATTA CTGAGAGGGAAATTCTGAAGCACGAATCGATTGCGCGCGGACGGGCAGTGCCTATGGGCCCTTTGCGGGACATGCTTATTCCTTCGAGCCGATTTACGACGGCTACCAGTCGTCATCCCTAAATATGCTAGTTTTGGTAAATCGGGGGATCCCGGGGGCATTTTGCTAT CGCCCCGGGTGAGCGGTGGCCACATTTGTACCTCAAGTCAGACTTATCGACGGCTGCGGTTTCGGACGATAGGATTCATTCTTTGACTGATAGGGCGATTGGTAAGAGGTCCGAAACGGTGCGGCTCCCGAGATCCTCTAAGAGGTCAATTCTGACTAACAAGCCTTCG AGAACTAAGGGCTGCTCGGACGTGTGGTCAATAAGGATTGTTACCCGACACGATACCCAATGCCCGCAGAGAGTAGGTCTCTGAGGGAGTAAGTGTAGTTCATTTGCTACTGAGGGTAATCGAACCCCATCGGGTCCTTGATGGACACCCATCGTATACCCCATCAAAC'''

print(*RandomizedMotifSearch(DnaString,k,t))
